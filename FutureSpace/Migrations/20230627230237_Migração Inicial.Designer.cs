// <auto-generated />
using System;
using FutureSpace.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FutureSpace.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230627230237_Migração Inicial")]
    partial class MigraçãoInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FutureSpace.Models.Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_con");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("family_con");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("full_name_con");

                    b.Property<string>("LaunchLibraryId")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("launch_library_id_con");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_con");

                    b.Property<string>("Variante")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("variantt_con");

                    b.HasKey("Id");

                    b.ToTable("configurations", (string)null);
                });

            modelBuilder.Entity("FutureSpace.Models.Launch", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("id_lau");

                    b.Property<string>("FailReason")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("failreason_lau");

                    b.Property<string>("Hashtag")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("hashtag_lau");

                    b.Property<string>("HoldReason")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("holdreason_lau");

                    b.Property<string>("Image")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("image_lau");

                    b.Property<string>("Infographic")
                        .HasColumnType("longtext")
                        .HasColumnName("infographic_lau");

                    b.Property<bool>("Inhold")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("inhold_lau");

                    b.Property<string>("LaunchLibraryId")
                        .HasColumnType("longtext")
                        .HasColumnName("launch_library_id_lau");

                    b.Property<int>("LaunchServiceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("launch_dervice_provider_id_lau");

                    b.Property<int>("MissionId")
                        .HasColumnType("int")
                        .HasColumnName("mission_id_lau");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_lau");

                    b.Property<string>("Net")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("net_lau");

                    b.Property<int>("PadId")
                        .HasColumnType("int")
                        .HasColumnName("pad_id_lau");

                    b.Property<string>("Probability")
                        .HasColumnType("longtext")
                        .HasColumnName("probability_lau");

                    b.Property<string>("Program")
                        .HasColumnType("longtext")
                        .HasColumnName("program_lau");

                    b.Property<int>("RocketId")
                        .HasColumnType("int")
                        .HasColumnName("rocket_id_lau");

                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("slug_lau");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id_lau");

                    b.Property<bool>("TbdDate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("tbddate_lau");

                    b.Property<bool>("TbdTime")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("tbdtime_lau");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("url_lau");

                    b.Property<bool>("WebcastLive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("webcast_live_lau");

                    b.Property<DateTime>("WindowEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("window_end_lau");

                    b.Property<DateTime>("WindowStart")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("window_start_lau");

                    b.HasKey("Id");

                    b.HasIndex("LaunchServiceProviderId");

                    b.HasIndex("MissionId");

                    b.HasIndex("PadId");

                    b.HasIndex("RocketId");

                    b.HasIndex("StatusId");

                    b.ToTable("launchers", (string)null);
                });

            modelBuilder.Entity("FutureSpace.Models.LaunchServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_lsp");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_lsp");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("type_lsp");

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("url_lsp");

                    b.HasKey("Id");

                    b.ToTable("launch_service_providers", (string)null);
                });

            modelBuilder.Entity("FutureSpace.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_loc");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("country_code_loc");

                    b.Property<string>("MapImage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("map_image_loc");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_loc");

                    b.Property<int>("TotalLandingCount")
                        .HasColumnType("int")
                        .HasColumnName("total_landing_count_loc");

                    b.Property<int>("TotalLaunchCount")
                        .HasColumnType("int")
                        .HasColumnName("total_launch_count_loc");

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("url_loc");

                    b.HasKey("Id");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("FutureSpace.Models.Mission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_mis");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description_mis");

                    b.Property<string>("LaunchDesignator")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("launch_designator_mis");

                    b.Property<string>("LaunchLibraryId")
                        .HasColumnType("longtext")
                        .HasColumnName("launch_library_id_mis");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_mis");

                    b.Property<int>("OrbitId")
                        .HasColumnType("int")
                        .HasColumnName("orbit_id_mis");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("type_mis");

                    b.HasKey("Id");

                    b.HasIndex("OrbitId");

                    b.ToTable("missions", (string)null);
                });

            modelBuilder.Entity("FutureSpace.Models.Orbit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_orb");

                    b.Property<string>("Abbrev")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("abbrev_orb");

                    b.Property<string>("Name")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("name_orb");

                    b.HasKey("Id");

                    b.ToTable("orbits", (string)null);
                });

            modelBuilder.Entity("FutureSpace.Models.Pad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pad");

                    b.Property<string>("AgencyId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("agency_id_pad");

                    b.Property<string>("InfoUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("info_url_pad");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("latitude_pad");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id_pad");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("longitude_pad");

                    b.Property<string>("MapImage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("map_image_pad");

                    b.Property<string>("MapUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("map_url_pad");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name_pad");

                    b.Property<int>("Total_Launch_Count")
                        .HasMaxLength(100)
                        .HasColumnType("int")
                        .HasColumnName("total_launch_count_pad");

                    b.Property<string>("Url")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("url_pad");

                    b.Property<string>("WikiUrl")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("wiki_url_pad");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("pads", (string)null);
                });

            modelBuilder.Entity("FutureSpace.Models.Rocket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_roc");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("int")
                        .HasColumnName("configuration_id_roc");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("rockets", (string)null);
                });

            modelBuilder.Entity("FutureSpace.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_sta");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("name_sta");

                    b.HasKey("Id");

                    b.ToTable("status", (string)null);
                });

            modelBuilder.Entity("FutureSpace.Models.Launch", b =>
                {
                    b.HasOne("FutureSpace.Models.LaunchServiceProvider", "LaunchServiceProvider")
                        .WithMany()
                        .HasForeignKey("LaunchServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FutureSpace.Models.Mission", "Mission")
                        .WithMany()
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FutureSpace.Models.Pad", "Pad")
                        .WithMany()
                        .HasForeignKey("PadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FutureSpace.Models.Rocket", "Rocket")
                        .WithMany()
                        .HasForeignKey("RocketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FutureSpace.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaunchServiceProvider");

                    b.Navigation("Mission");

                    b.Navigation("Pad");

                    b.Navigation("Rocket");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("FutureSpace.Models.Mission", b =>
                {
                    b.HasOne("FutureSpace.Models.Orbit", "Orbit")
                        .WithMany()
                        .HasForeignKey("OrbitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orbit");
                });

            modelBuilder.Entity("FutureSpace.Models.Pad", b =>
                {
                    b.HasOne("FutureSpace.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FutureSpace.Models.Rocket", b =>
                {
                    b.HasOne("FutureSpace.Models.Configuration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Configuration");
                });
#pragma warning restore 612, 618
        }
    }
}
